#!/bin/sh --
set -ex
SCRIPT_DIR="$(cd -- "${0%/*}/" && pwd)"
. "$SCRIPT_DIR/../hc/src/shell/recipe.sh"

. "$SCRIPT_DIR/files/urls"
sha512="89a67ebfbbc764cc456e8825ecfa90707741f8835b1b2adffae0b227ab1fe5ca9cce75b0efaffc9ca8431cae528dc54fd838867a56a2b645344d9e82d19ab1b7"

DEPENDENCIES="make xz python cmake musl_headers"

recipe_start
export PATH="$OUT/make/bin:$OUT/xz/bin:$OUT/python/bin:$OUT/cmake/bin:$PATH"
xz -d -c "$(recipe_download "$url_llvm" "$sha512")" | tar xf -
cd ./llvm-project-16.0.6.src

# Make llvm-tblgen output more deterministic.
sed -e 's/llvm::sort(SuperRegClasses/llvm::stable_sort(SuperRegClasses/' ./llvm/utils/TableGen/CodeGenRegisters.cpp > ./sed.temp
mv ./sed.temp ./llvm/utils/TableGen/CodeGenRegisters.cpp
sed -e 's/llvm::sort(OpcodeMappings/llvm::stable_sort(OpcodeMappings/' ./llvm/utils/TableGen/CodeGenSchedule.cpp > ./sed.temp
mv ./sed.temp ./llvm/utils/TableGen/CodeGenSchedule.cpp

# Make the SROA optimisation pass more deterministic.
sed -e 's/llvm::sort(AS);/llvm::stable_sort(AS);/' ./llvm/lib/Transforms/Scalar/SROA.cpp > sed.temp
mv ./sed.temp ./llvm/lib/Transforms/Scalar/SROA.cpp

cmake -S llvm -B build -G "Unix Makefiles" -Wno-dev \
-DCMAKE_MAKE_PROGRAM=make -DCMAKE_C_COMPILER="$CC" -DCMAKE_CXX_COMPILER="$CXX" \
-DCMAKE_INSTALL_PREFIX="$OUT/$SCRIPT_NAME" \
-DCMAKE_BUILD_TYPE=Release \
-DLLVM_APPEND_VC_REV=OFF \
-DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_INCLUDE_DOCS=OFF -DLLVM_INCLUDE_UTILS=OFF \
-DLLVM_ENABLE_DOXYGEN=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_LIBXML2=OFF -DLLVM_ENABLE_CURL=OFF -DLLVM_ENABLE_LIBEDIT=OFF -DLLVM_ENABLE_LIBPFM=OFF -DLLVM_ENABLE_ZLIB=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_UNWIND_TABLES=OFF -DLLVM_ENABLE_TERMINFO=OFF -DLLVM_HAVE_LIBXAR=OFF -DCLANG_ENABLE_ARCMT=OFF \
-DLLVM_ENABLE_PROJECTS="clang;lld" \
-DLLVM_TARGETS_TO_BUILD="AArch64;RISCV;X86" \
-DLLVM_DEFAULT_TARGET_TRIPLE="x86_64-unknown-linux-musl" \
-DDEFAULT_SYSROOT="/path/that/doesnt/exist" -DCLANG_DEFAULT_LINKER="lld" -DCLANG_DEFAULT_RTLIB="compiler-rt" -DCLANG_DEFAULT_CXX_STDLIB="libc++" -DCLANG_DEFAULT_PIE_ON_LINUX=OFF \
-DLLVM_ENABLE_RUNTIMES="compiler-rt" \
-DLLVM_BUILTIN_TARGETS="x86_64-unknown-linux-musl" \
-DLLVM_RUNTIME_TARGETS="x86_64-unknown-linux-musl" \
-DBUILTINS_x86_64-unknown-linux-musl_CMAKE_SYSTEM_NAME=Linux \
-DBUILTINS_x86_64-unknown-linux-musl_CMAKE_FIND_USE_CMAKE_SYSTEM_PATH=NO \
-DBUILTINS_x86_64-unknown-linux-musl_CMAKE_SYSROOT="$OUT/musl_headers/x86_64" \
-DBUILTINS_x86_64-unknown-linux-musl_CMAKE_C_FLAGS="-ffile-prefix-map=$PWD=." \
-DRUNTIMES_x86_64-unknown-linux-musl_CMAKE_SYSTEM_NAME=Linux \
-DRUNTIMES_x86_64-unknown-linux-musl_CMAKE_FIND_USE_CMAKE_SYSTEM_PATH=NO \
-DRUNTIMES_x86_64-unknown-linux-musl_COMPILER_RT_SCUDO_STANDALONE_BUILD_SHARED=OFF \
-DRUNTIMES_x86_64-unknown-linux-musl_COMPILER_RT_BUILD_GWP_ASAN=OFF \
-DRUNTIMES_x86_64-unknown-linux-musl_COMPILER_RT_BUILD_ORC=OFF \
-DRUNTIMES_x86_64-unknown-linux-musl_COMPILER_RT_BUILD_MEMPROF=OFF \
-DRUNTIMES_x86_64-unknown-linux-musl_COMPILER_RT_BUILD_PROFILE=OFF \
-DRUNTIMES_x86_64-unknown-linux-musl_COMPILER_RT_BUILD_LIBFUZZER=OFF \
-DRUNTIMES_x86_64-unknown-linux-musl_COMPILER_RT_BUILD_XRAY=OFF \
-DRUNTIMES_x86_64-unknown-linux-musl_COMPILER_RT_BUILD_SANITIZERS=OFF >/dev/null
make -C build -j "$NUM_CPUS" install-runtimes install-x86-resource-headers/fast install-utility-resource-headers/fast install-builtins-x86_64-unknown-linux-musl/fast install-clang/fast install-lld/fast install-llvm-ar/fast install-llvm-nm/fast install-llvm-strip/fast install-llvm-objcopy/fast install-llvm-objdump/fast install-llvm-readobj/fast install-llvm-readelf/fast install-llvm-tblgen/fast install-clang-tblgen/fast >/dev/null

rm -rf "$PWD"
recipe_finish
